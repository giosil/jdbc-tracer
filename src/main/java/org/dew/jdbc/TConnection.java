package org.dew.jdbc;

import java.sql.*;

import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public class TConnection implements Connection {

  protected static int iCount = 0;

  protected Connection conn;
  protected String sTag = null;
  protected Tracer tracer;
  protected String sDBMS;

  public TConnection(Connection conn, String sTag, Tracer tracer, String sDBMS) {
    this.conn = conn;
    this.sTag = sTag;
    this.tracer = tracer;
    this.sDBMS = sDBMS;
  }

  public void clearWarnings() throws SQLException {
    tracer.info("[" + sTag + ".clearWarnings()]");
    conn.clearWarnings();
  }

  public void close() throws SQLException {
    tracer.info("[" + sTag + ".close()]");
    try {
      conn.close();
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public void commit() throws SQLException {
    tracer.info("[" + sTag + ".commit()]");
    tracer.debug("commit;");
    try {
      conn.commit();
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public Statement createStatement() throws SQLException {
    try {
      Statement stm = conn.createStatement();
      iCount++;
      String sStmTag = getStatementTag();
      tracer.info("[" + sStmTag + " created by " + sTag + ".createStatement()]");
      return new TStatement(stm, sStmTag, tracer, sDBMS);
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
    try {
      Statement stm = conn.createStatement(resultSetType, resultSetConcurrency);
      iCount++;
      String sStmTag = getStatementTag();
      tracer.info("[" + sStmTag + " created by " + sTag + ".createStatement(" + resultSetType + "," + resultSetConcurrency + ")]");
      return new TStatement(stm, sStmTag, tracer, sDBMS);
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    try {
      Statement stm = conn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
      iCount++;
      String sStmTag = getStatementTag();
      tracer.info("[" + sStmTag + " created by " + sTag + ".createStatement(" + resultSetType + "," + resultSetConcurrency + "," + resultSetHoldability + ")]");
      return new TStatement(stm, sStmTag, tracer, sDBMS);
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public boolean getAutoCommit() throws SQLException {
    return conn.getAutoCommit();
  }

  public String getCatalog() throws SQLException {
    return conn.getCatalog();
  }

  public int getHoldability() throws SQLException {
    return conn.getHoldability();
  }

  public DatabaseMetaData getMetaData() throws SQLException {
    return conn.getMetaData();
  }

  public int getTransactionIsolation() throws SQLException {
    return conn.getTransactionIsolation();
  }

  public Map<String, Class<?>> getTypeMap() throws SQLException {
    return conn.getTypeMap();
  }

  public SQLWarning getWarnings() throws SQLException {
    return conn.getWarnings();
  }

  public boolean isClosed() throws SQLException {
    return conn.isClosed();
  }

  public boolean isReadOnly() throws SQLException {
    return conn.isReadOnly();
  }

  public String nativeSQL(String sSQL) throws SQLException {
    return conn.nativeSQL(sSQL);
  }

  public CallableStatement prepareCall(String sSQL) throws SQLException {
    return conn.prepareCall(sSQL);
  }

  public CallableStatement prepareCall(String sSQL, int iRsType, int iRsConcurrency) throws SQLException {
    return conn.prepareCall(sSQL, iRsType, iRsConcurrency);
  }

  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    return conn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
  }

  public PreparedStatement prepareStatement(String sSQL) throws SQLException {
    try {
      PreparedStatement pstm = conn.prepareStatement(sSQL);
      iCount++;
      String sStmTag = getPreparedStatementTag();
      tracer.info("[" + sStmTag + " created by " + sTag + ".prepareStatement(\"" + sSQL + "\")]");
      return new TPreparedStatement(pstm, sSQL, sStmTag, tracer, sDBMS);
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public PreparedStatement prepareStatement(String sSQL, int autoGeneratedKeys) throws SQLException {
    try {
      PreparedStatement pstm = conn.prepareStatement(sSQL, autoGeneratedKeys);
      iCount++;
      String sStmTag = getPreparedStatementTag();
      tracer.info("[" + sStmTag + " created by " + sTag + ".prepareStatement(\"" + sSQL + "\"," + autoGeneratedKeys + ")]");
      return new TPreparedStatement(pstm, sSQL, sStmTag, tracer, sDBMS);
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public PreparedStatement prepareStatement(String sSQL, int iRsType, int iRsConcurrency) throws SQLException {
    try {
      PreparedStatement pstm = conn.prepareStatement(sSQL, iRsType, iRsConcurrency);
      iCount++;
      String sStmTag = getPreparedStatementTag();
      tracer.info("[" + sStmTag + " created by " + sTag + ".prepareStatement(\"" + sSQL + "\"," + iRsType + "," + iRsConcurrency + ")]");
      return new TPreparedStatement(pstm, sSQL, sStmTag, tracer, sDBMS);
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public PreparedStatement prepareStatement(String sSQL, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    try {
      PreparedStatement pstm = conn.prepareStatement(sSQL, resultSetType, resultSetConcurrency, resultSetHoldability);
      iCount++;
      String sStmTag = getPreparedStatementTag();
      tracer.info("[" + sStmTag + " created by " + sTag + ".prepareStatement(\"" + sSQL + "\"," + resultSetType + "," + resultSetConcurrency + "," + resultSetHoldability + ")]");
      return new TPreparedStatement(pstm, sSQL, sStmTag, tracer, sDBMS);
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public PreparedStatement prepareStatement(String sSQL, int[] columnIndexes) throws SQLException {
    try {
      PreparedStatement pstm = conn.prepareStatement(sSQL, columnIndexes);
      iCount++;
      String sStmTag = getPreparedStatementTag();
      tracer.info("[" + sStmTag + " created by " + sTag + ".prepareStatement(\"" + sSQL + "\"," + columnIndexes + ")]");
      return new TPreparedStatement(pstm, sSQL, sStmTag, tracer, sDBMS);
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public PreparedStatement prepareStatement(String sSQL, String[] columnNames) throws SQLException {
    try {
      PreparedStatement pstm = conn.prepareStatement(sSQL, columnNames);
      iCount++;
      String sStmTag = getPreparedStatementTag();
      tracer.info("[" + sStmTag + " created by " + sTag + ".prepareStatement(\"" + sSQL + "\"," + columnNames + ")]");
      return new TPreparedStatement(pstm, sSQL, sStmTag, tracer, sDBMS);
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public void releaseSavepoint(Savepoint savepoint) throws SQLException {
    tracer.info("[" + sTag + ".releaseSavepoint(" + savepoint + ")]");
    conn.releaseSavepoint(savepoint);
  }

  public void rollback() throws SQLException {
    tracer.info("[" + sTag + ".rollback()]");
    tracer.debug("rollback;");
    try {
      conn.rollback();
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public void rollback(Savepoint savepoint) throws SQLException {
    tracer.info("[" + sTag + ".rollback(" + savepoint + ")]");
    conn.rollback(savepoint);
  }

  public void setAutoCommit(boolean bAutoCommit) throws SQLException {
    tracer.info("[" + sTag + ".setAutoCommit(" + bAutoCommit + ")]");
    try {
      conn.setAutoCommit(bAutoCommit);
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public void setCatalog(String sCatalog) throws SQLException {
    tracer.info("[" + sTag + ".setCatalog(" + sCatalog + ")]");
    conn.setCatalog(sCatalog);
  }

  public void setHoldability(int holdability) throws SQLException {
    tracer.info("[" + sTag + ".setHoldability(" + holdability + ")]");
    conn.setHoldability(holdability);
  }

  public void setReadOnly(boolean bReadOnly) throws SQLException {
    tracer.info("[" + sTag + ".setReadOnly(" + bReadOnly + ")]");
    try {
      conn.setReadOnly(bReadOnly);
    } catch (SQLException ex) {
      tracer.error(ex);
      throw ex;
    }
  }

  public Savepoint setSavepoint() throws SQLException {
    tracer.info("[" + sTag + ".setSavepoint()]");
    return conn.setSavepoint();
  }

  public Savepoint setSavepoint(String name) throws SQLException {
    tracer.info("[" + sTag + ".setSavepoint(" + name + ")]");
    return conn.setSavepoint(name);
  }

  public void setTransactionIsolation(int iTransIsolation) throws SQLException {
    tracer.info("[" + sTag + ".setTransactionIsolation(" + iTransIsolation + ")]");
    conn.setTransactionIsolation(iTransIsolation);
  }

  public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
    conn.setTypeMap(map);
  }

  private String getPreparedStatementTag() {
    return "PS" + iCount + "@" + sTag;
  }

  private String getStatementTag() {
    return "S" + iCount + "@" + sTag;
  }

  public <T> T unwrap(Class<T> iface) throws SQLException {
    return conn.unwrap(iface);
  }

  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    return conn.isWrapperFor(iface);
  }

  public Clob createClob() throws SQLException {
    return conn.createClob();
  }

  public Blob createBlob() throws SQLException {
    return conn.createBlob();
  }

  public NClob createNClob() throws SQLException {
    return conn.createNClob();
  }

  public SQLXML createSQLXML() throws SQLException {
    return conn.createSQLXML();
  }

  public boolean isValid(int timeout) throws SQLException {
    return conn.isValid(timeout);
  }

  public void setClientInfo(String name, String value) throws SQLClientInfoException {
    tracer.info("[" + sTag + ".setClientInfo(" + name + "," + value + ")]");
    conn.setClientInfo(name, value);
  }

  public void setClientInfo(Properties properties) throws SQLClientInfoException {
    conn.setClientInfo(properties);
  }

  public String getClientInfo(String name) throws SQLException {
    return conn.getClientInfo(name);
  }

  public Properties getClientInfo() throws SQLException {
    return conn.getClientInfo();
  }

  public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
    return conn.createArrayOf(typeName, elements);
  }

  public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
    return conn.createStruct(typeName, attributes);
  }

  public void setSchema(String schema) throws SQLException {
    tracer.info("[" + sTag + ".setSchema(" + schema + ")]");
    conn.setSchema(schema);
  }

  public String getSchema() throws SQLException {
    return conn.getSchema();
  }

  public void abort(Executor executor) throws SQLException {
    tracer.info("[" + sTag + ".abort(" + executor + ")]");
    conn.abort(executor);
  }

  public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
    tracer.info("[" + sTag + ".setNetworkTimeout(" + executor + "," + milliseconds + ")]");
    conn.setNetworkTimeout(executor, milliseconds);
  }

  public int getNetworkTimeout() throws SQLException {
    return conn.getNetworkTimeout();
  }
}